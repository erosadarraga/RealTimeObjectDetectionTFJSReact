{"ast":null,"code":"import _toConsumableArray from \"/home/eros/Escritorio/next IA/prueba final/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, SplitV, util } from '@tensorflow/tfjs-core';\nimport { slice } from './Slice';\nexport function splitV(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var x = inputs.x;\n  var numOrSizeSplits = attrs.numOrSizeSplits,\n      axis = attrs.axis;\n  var $axis = util.parseAxisParam(axis, x.shape)[0];\n  var splitSizes = backend_util.prepareSplitSize(x, numOrSizeSplits, $axis);\n  var xRank = x.shape.length;\n  var begin = new Array(xRank).fill(0);\n  var size = x.shape.slice();\n  return splitSizes.map(function (s) {\n    var sliceSize = _toConsumableArray(size);\n\n    sliceSize[$axis] = s;\n    var sliceT = slice({\n      inputs: {\n        x: x\n      },\n      backend: backend,\n      attrs: {\n        begin: begin,\n        size: sliceSize\n      }\n    });\n    begin[$axis] += s;\n    return sliceT;\n  });\n}\nexport var splitVConfig = {\n  kernelName: SplitV,\n  backendName: 'webgl',\n  kernelFunc: splitV\n};","map":{"version":3,"sources":["../../src/kernels/SplitV.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,YAAR,EAAgD,MAAhD,EAA+F,IAA/F,QAA0G,uBAA1G;AAGA,SAAQ,KAAR,QAAoB,SAApB;AAEA,OAAM,SAAU,MAAV,CACF,IADE,EAEuE;AAE3E,MAAO,MAAP,GAAiC,IAAjC,CAAO,MAAP;AAAA,MAAe,OAAf,GAAiC,IAAjC,CAAe,OAAf;AAAA,MAAwB,KAAxB,GAAiC,IAAjC,CAAwB,KAAxB;AACA,MAAO,CAAP,GAAY,MAAZ,CAAO,CAAP;AACA,MAAO,eAAP,GAAgC,KAAhC,CAAO,eAAP;AAAA,MAAwB,IAAxB,GAAgC,KAAhC,CAAwB,IAAxB;AAEA,MAAM,KAAK,GAAG,IAAI,CAAC,cAAL,CAAoB,IAApB,EAA0B,CAAC,CAAC,KAA5B,EAAmC,CAAnC,CAAd;AACA,MAAM,UAAU,GAAG,YAAY,CAAC,gBAAb,CAA8B,CAA9B,EAAiC,eAAjC,EAAkD,KAAlD,CAAnB;AAEA,MAAM,KAAK,GAAG,CAAC,CAAC,KAAF,CAAQ,MAAtB;AACA,MAAM,KAAK,GAAG,IAAI,KAAJ,CAAU,KAAV,EAAiB,IAAjB,CAAsB,CAAtB,CAAd;AACA,MAAM,IAAI,GAAG,CAAC,CAAC,KAAF,CAAQ,KAAR,EAAb;AAEA,SAAO,UAAU,CAAC,GAAX,CAAe,UAAA,CAAC,EAAG;AACxB,QAAM,SAAS,sBAAO,IAAP,CAAf;;AACA,IAAA,SAAS,CAAC,KAAD,CAAT,GAAmB,CAAnB;AACA,QAAM,MAAM,GACR,KAAK,CAAC;AAAC,MAAA,MAAM,EAAE;AAAC,QAAA,CAAC,EAAD;AAAD,OAAT;AAAc,MAAA,OAAO,EAAP,OAAd;AAAuB,MAAA,KAAK,EAAE;AAAC,QAAA,KAAK,EAAL,KAAD;AAAQ,QAAA,IAAI,EAAE;AAAd;AAA9B,KAAD,CADT;AAEA,IAAA,KAAK,CAAC,KAAD,CAAL,IAAgB,CAAhB;AACA,WAAO,MAAP;AACD,GAPM,CAAP;AAQD;AAED,OAAO,IAAM,YAAY,GAAiB;AACxC,EAAA,UAAU,EAAE,MAD4B;AAExC,EAAA,WAAW,EAAE,OAF2B;AAGxC,EAAA,UAAU,EAAE;AAH4B,CAAnC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, SplitV, util } from '@tensorflow/tfjs-core';\nimport { slice } from './Slice';\nexport function splitV(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { numOrSizeSplits, axis } = attrs;\n    const $axis = util.parseAxisParam(axis, x.shape)[0];\n    const splitSizes = backend_util.prepareSplitSize(x, numOrSizeSplits, $axis);\n    const xRank = x.shape.length;\n    const begin = new Array(xRank).fill(0);\n    const size = x.shape.slice();\n    return splitSizes.map(s => {\n        const sliceSize = [...size];\n        sliceSize[$axis] = s;\n        const sliceT = slice({ inputs: { x }, backend, attrs: { begin, size: sliceSize } });\n        begin[$axis] += s;\n        return sliceT;\n    });\n}\nexport const splitVConfig = {\n    kernelName: SplitV,\n    backendName: 'webgl',\n    kernelFunc: splitV\n};\n//# sourceMappingURL=SplitV.js.map"]},"metadata":{},"sourceType":"module"}